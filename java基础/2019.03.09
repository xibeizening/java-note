1、数据类型转换：当数据类型不一样时，将会发生数据类型转换。
      自动类型转换（隐式）
          特点：代码不需要进行特殊处理，自动完成。
          规则：数据范围从小到大。int——>long  float——>double  long——>float
      强制类型转换（显式）
          特点：代码需要进行特殊处理不能自动完成。
          格式：范围小的类型 范围小的变量 = （范围小的类型） 原本范围大的数据；
                int num = (int)100L;
 注意事项：强转后，数据可能会发生精度损失，数据溢出。（浮点数转换为整数，其所有的小数位都会被舍弃掉）
          byte/short/char这三种类型在参与运算的时候都会提先将数据类型提升成int类型，然后再进行运算。
          boolean类型不能发生数据类型转换。
2、ASCII码表(数字与字符的对照关系表):美国信息交换标准代码（0~127）。
   48--'0',65--'A',97--'a'
   Unicode码表：万国码。开头0~127部分与ASCII码完全一样
3、运算符：进行特定操作的符号
   表达式：用运算符与操作数组成的式子
   四则运算加取模
   + - * / %
   注意事项：一旦运算符中有不同类型的数据，那么结果将会是数据类型范围大的那种（int+double--->double+double--->double）。
            "+"对于字符串String来说，加号代表字符串连接操作（任何数据类型和字符串进行连接的时候结果都会是字符串）。
            小括号中的表达式是优先于一切的。
4、自增++，自减--（和++同理）
   使用方式：单独使用和混合使用。
   使用区别：单独使用前++与后++时没有任何区别，混合使用时前++与后++有重大区别。
   ++a（先加后用）如果前++，那么变量立刻+1，然后拿着结果参与运算使用。
   a++（先用后加）如果后++，那么首先使用变量参与运算使用，然后变量+1。
   注意事项：只有整型变量方可使用自增自减。
5、赋值运算符
   基本赋值：= 代表将右侧的数据交给左侧的变量。
   复合赋值：
   +=       a+=1 相当于 a=a+1
   -=       
   *=
   /=
   %=       同理
   注意事项：只有变量才能使用赋值运算符。
            复合运算其中隐含了一个强制类型转换。
            byte num = 30;
            num += 5;
            //num = num + 5;
            //num = byte + int  
            //num = int
            //num = (byte) int
6、比较运算符（6种）
   < > <= >= == !=
   比较运算符的结果为布尔值true或false
7、逻辑运算符（三种，与或非）
   与（并且）&&  全都是真才为true，否则是false。
   或（或者）||  全都是假才为false，否则是true。
   非（取反）！  本来是true取反后为false，本来是false取反后为true。
   与或非运算具有短路效果：如果根据左边已经可以判断结果，那么右边的代码将不在执行。节省一定的性能
   (3>4 && ++a < 100)输出a的值即可验证短路效果。
8、一元运算符：只需要一个数据就可以进行操作的运算符。例如（取反! 自增++ 自减--）
   二元运算符：需要二个数据才可以进行操作的运算符。例如（加法+ 赋值=）
   三元运算符：需要三个数据才可以进行操作的运算符。
   格式 数据类型 变量名称 = 条件判断?表达式A:表达式B;（二者选其一）
   流程：首先判断条件是否成立
        如果条件成立为true，那么将表达式A的值赋值给左侧的变量
        如果条件不成立为false，那么将表达式B的值赋值给左侧的变量
        int max = a>b ? a:b;//求二者中的最大值
   注意事项：必须保证表达式A和B都符合左侧数据类型的要求。
            三元运算符的结果必须被使用。
9、定义一个方法的格式：
   public static voic 方法名称(){
          方法体
   }
   方法名称的命名规则和变量一样采用小驼峰。
   在类里面定义方法，和main方法同一级别。
   注意事项：方法定义的先后顺序无所谓。
   方法的定义不能产生嵌套包含关系
   方法定义好了之后，不会执行，如果要执行，一点要进行方法的调用。
   调用方法的格式:方法名称();

